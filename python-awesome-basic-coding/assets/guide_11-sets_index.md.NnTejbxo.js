import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DftKyQ5B.js";const o=JSON.parse('{"title":"集合学习模块","description":"","frontmatter":{},"headers":[],"relativePath":"guide/11-sets/index.md","filePath":"guide/11-sets/index.md"}'),t={name:"guide/11-sets/index.md"};function e(h,s,p,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="集合学习模块" tabindex="-1">集合学习模块 <a class="header-anchor" href="#集合学习模块" aria-label="Permalink to &quot;集合学习模块&quot;">​</a></h1><h2 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h2><p>通过本模块的学习，你将掌握：</p><ol><li><strong>集合的基本概念</strong>：理解集合的特性（唯一性、无序性）和应用场景</li><li><strong>集合的创建方法</strong>：掌握多种创建集合的方式和最佳实践</li><li><strong>集合基本操作</strong>：熟练使用添加、删除、查找等基本操作</li><li><strong>集合数学运算</strong>：理解并应用并集、交集、差集、对称差集等运算</li><li><strong>集合内置方法</strong>：掌握集合提供的各种内置方法和使用技巧</li><li><strong>集合推导式</strong>：学会使用集合推导式高效创建和处理集合</li><li><strong>frozenset应用</strong>：理解不可变集合的特点和使用场景</li><li><strong>性能优化</strong>：了解集合在去重和查找方面的性能优势</li><li><strong>实际应用</strong>：能够在实际项目中合理使用集合解决问题</li></ol><h2 id="主要内容概述" tabindex="-1">主要内容概述 <a class="header-anchor" href="#主要内容概述" aria-label="Permalink to &quot;主要内容概述&quot;">​</a></h2><h3 id="核心知识点" tabindex="-1">核心知识点 <a class="header-anchor" href="#核心知识点" aria-label="Permalink to &quot;核心知识点&quot;">​</a></h3><ul><li><strong>集合特性</strong>：唯一性、无序性、可变性</li><li><strong>创建方式</strong>：字面量、构造函数、推导式</li><li><strong>基本操作</strong>：增删改查、成员检测</li><li><strong>数学运算</strong>：交并差补运算及其应用</li><li><strong>方法详解</strong>：add、remove、discard、pop等方法</li><li><strong>推导式</strong>：条件过滤、嵌套处理</li><li><strong>frozenset</strong>：不可变集合的特点和用途</li><li><strong>性能对比</strong>：集合vs列表在不同场景下的性能</li></ul><h3 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h3><ul><li><strong>数据去重</strong>：快速去除重复元素</li><li><strong>成员检测</strong>：高效判断元素是否存在</li><li><strong>权限管理</strong>：用户权限的交集和并集运算</li><li><strong>数据分析</strong>：集合运算在数据处理中的应用</li><li><strong>推荐系统</strong>：基于集合运算的相似度计算</li><li><strong>图算法</strong>：社交网络分析和路径查找</li></ul><h2 id="学习内容" tabindex="-1">学习内容 <a class="header-anchor" href="#学习内容" aria-label="Permalink to &quot;学习内容&quot;">​</a></h2><h3 id="创建集合" tabindex="-1">创建集合 <a class="header-anchor" href="#创建集合" aria-label="Permalink to &quot;创建集合&quot;">​</a></h3><p><strong>学习内容</strong>：集合的创建方法和基本特性</p><ul><li>使用花括号创建集合</li><li>使用set()函数创建集合</li><li>空集合的创建</li><li>从其他数据类型创建集合</li><li>集合推导式基础</li><li>集合的唯一性和无序性演示</li><li>实际应用：数据去重、统计分析</li></ul><p><strong>重点知识点</strong>：</p><ul><li>集合的基本特性（唯一性、无序性）</li><li>不同创建方式的适用场景</li><li>集合与其他数据类型的转换</li></ul><p><strong>代码示例</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用花括号创建集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fruits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;banana&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fruits)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {&#39;banana&#39;, &#39;orange&#39;, &#39;apple&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用set()函数创建集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {1, 2, 3}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 空集合的创建</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">empty_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty_set)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># set()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="集合操作" tabindex="-1">集合操作 <a class="header-anchor" href="#集合操作" aria-label="Permalink to &quot;集合操作&quot;">​</a></h3><p><strong>学习内容</strong>：集合的基本操作和方法</p><ul><li>添加元素：add()、update()</li><li>删除元素：remove()、discard()、pop()、clear()</li><li>成员检测：in操作符</li><li>集合长度和判空</li><li>集合复制和比较</li><li>高级操作技巧</li></ul><p><strong>重点知识点</strong>：</p><ul><li>remove()和discard()的区别</li><li>pop()方法的随机性</li><li>集合操作的时间复杂度</li></ul><p><strong>代码示例</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_set.add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_set)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {1, 2, 3, 4}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_set.remove(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果元素不存在会抛出KeyError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_set.discard(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果元素不存在不会抛出错误</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_set)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {1, 2, 3}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="集合数学运算" tabindex="-1">集合数学运算 <a class="header-anchor" href="#集合数学运算" aria-label="Permalink to &quot;集合数学运算&quot;">​</a></h3><p><strong>学习内容</strong>：集合的数学运算</p><ul><li>并集运算：| 和 union()</li><li>交集运算：&amp; 和 intersection()</li><li>差集运算：- 和 difference()</li><li>对称差集：^ 和 symmetric_difference()</li><li>就地运算方法</li><li>复杂运算组合</li><li>数学性质验证</li></ul><p><strong>重点知识点</strong>：</p><ul><li>运算符与方法的区别</li><li>就地运算的性能优势</li><li>集合运算的数学性质</li></ul><p><strong>代码示例</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 并集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">union_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(union_result)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {1, 2, 3, 4, 5, 6}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 交集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">intersection_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intersection_result)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {3, 4}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 差集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">difference_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(difference_result)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {1, 2}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="集合方法详解" tabindex="-1">集合方法详解 <a class="header-anchor" href="#集合方法详解" aria-label="Permalink to &quot;集合方法详解&quot;">​</a></h3><p><strong>学习内容</strong>：集合内置方法详解</p><ul><li>添加和删除方法的详细用法</li><li>运算方法的高级应用</li><li>比较方法：issubset()、issuperset()、isdisjoint()</li><li>复制方法：copy()</li><li>方法链式调用</li><li>性能对比分析</li></ul><p><strong>重点知识点</strong>：</p><ul><li>各种方法的返回值类型</li><li>方法的副作用和纯函数特性</li><li>最佳实践和使用建议</li></ul><h3 id="集合推导式" tabindex="-1">集合推导式 <a class="header-anchor" href="#集合推导式" aria-label="Permalink to &quot;集合推导式&quot;">​</a></h3><p><strong>学习内容</strong>：集合推导式的高级应用</p><ul><li>基础推导式语法</li><li>条件过滤</li><li>嵌套推导式</li><li>与其他推导式的对比</li><li>性能优势分析</li><li>复杂数据处理</li></ul><p><strong>重点知识点</strong>：</p><ul><li>推导式的语法结构</li><li>条件表达式的使用</li><li>推导式vs传统循环的性能对比</li></ul><p><strong>代码示例</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础集合推导式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">squares </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(squares)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {0, 1, 4, 9, 16, 25, 36, 49, 64, 81}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 带条件的集合推导式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">even_squares </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(even_squares)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># {0, 4, 16, 36, 64}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="不可变集合frozenset" tabindex="-1">不可变集合frozenset <a class="header-anchor" href="#不可变集合frozenset" aria-label="Permalink to &quot;不可变集合frozenset&quot;">​</a></h3><p><strong>学习内容</strong>：不可变集合frozenset</p><ul><li>frozenset的创建和特性</li><li>与set的区别和联系</li><li>作为字典键的应用</li><li>作为集合元素的应用</li><li>实际应用场景</li><li>性能特点分析</li></ul><p><strong>重点知识点</strong>：</p><ul><li>不可变性的优势和限制</li><li>frozenset的哈希特性</li><li>在复杂数据结构中的应用</li></ul><p><strong>代码示例</strong>：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建frozenset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frozen_set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> frozenset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frozen_set)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># frozenset({1, 2, 3, 4})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># frozenset作为字典键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict_with_frozenset_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    frozenset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]): </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    frozenset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]): </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dict_with_frozenset_key)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="学习建议" tabindex="-1">学习建议 <a class="header-anchor" href="#学习建议" aria-label="Permalink to &quot;学习建议&quot;">​</a></h2><h3 id="学习顺序" tabindex="-1">学习顺序 <a class="header-anchor" href="#学习顺序" aria-label="Permalink to &quot;学习顺序&quot;">​</a></h3><ol><li><strong>基础入门</strong>：从创建集合开始，理解集合的基本概念</li><li><strong>操作掌握</strong>：学习集合操作，掌握基本操作</li><li><strong>数学运算</strong>：理解集合数学运算</li><li><strong>方法详解</strong>：深入学习各种方法</li><li><strong>高级技巧</strong>：掌握集合推导式</li><li><strong>特殊应用</strong>：学习不可变集合</li><li><strong>综合练习</strong>：通过练习巩固所学知识</li></ol><h3 id="学习方法" tabindex="-1">学习方法 <a class="header-anchor" href="#学习方法" aria-label="Permalink to &quot;学习方法&quot;">​</a></h3><ol><li><strong>理论结合实践</strong>：每学完一个概念，立即运行相关代码</li><li><strong>对比学习</strong>：将集合与列表、元组进行对比，理解各自特点</li><li><strong>性能意识</strong>：关注集合在不同场景下的性能表现</li><li><strong>实际应用</strong>：尝试在实际项目中使用集合解决问题</li><li><strong>练习巩固</strong>：多做练习题，加深理解</li></ol><h3 id="重点关注" tabindex="-1">重点关注 <a class="header-anchor" href="#重点关注" aria-label="Permalink to &quot;重点关注&quot;">​</a></h3><ol><li><strong>集合特性</strong>：深入理解唯一性和无序性的含义</li><li><strong>运算规则</strong>：掌握集合数学运算的规律和性质</li><li><strong>性能优势</strong>：了解集合在去重和查找方面的优势</li><li><strong>应用场景</strong>：学会在合适的场景使用集合</li><li><strong>最佳实践</strong>：遵循Python集合使用的最佳实践</li></ol><h2 id="学习路径" tabindex="-1">学习路径 <a class="header-anchor" href="#学习路径" aria-label="Permalink to &quot;学习路径&quot;">​</a></h2><h3 id="初级阶段-1-2天" tabindex="-1">初级阶段（1-2天） <a class="header-anchor" href="#初级阶段-1-2天" aria-label="Permalink to &quot;初级阶段（1-2天）&quot;">​</a></h3><ul><li>完成前3个主题的学习，掌握集合基础</li><li>理解集合的创建、操作和数学运算</li><li>能够解决简单的去重和查找问题</li></ul><h3 id="中级阶段-2-3天" tabindex="-1">中级阶段（2-3天） <a class="header-anchor" href="#中级阶段-2-3天" aria-label="Permalink to &quot;中级阶段（2-3天）&quot;">​</a></h3><ul><li>完成方法详解和推导式的学习</li><li>能够使用集合解决复杂的数据处理问题</li><li>理解性能优化的重要性</li></ul><h3 id="高级阶段-2-3天" tabindex="-1">高级阶段（2-3天） <a class="header-anchor" href="#高级阶段-2-3天" aria-label="Permalink to &quot;高级阶段（2-3天）&quot;">​</a></h3><ul><li>完成frozenset和综合应用的学习</li><li>能够设计基于集合的复杂数据结构</li><li>在实际项目中熟练应用集合</li></ul><h3 id="实践项目建议" tabindex="-1">实践项目建议 <a class="header-anchor" href="#实践项目建议" aria-label="Permalink to &quot;实践项目建议&quot;">​</a></h3><ol><li><strong>数据清洗工具</strong>：使用集合去重和过滤数据</li><li><strong>权限管理系统</strong>：基于集合运算的权限控制</li><li><strong>推荐算法</strong>：使用集合计算用户相似度</li><li><strong>社交网络分析</strong>：基于集合的好友关系分析</li><li><strong>文本分析工具</strong>：使用集合进行词汇统计和分析</li></ol><h2 id="扩展学习" tabindex="-1">扩展学习 <a class="header-anchor" href="#扩展学习" aria-label="Permalink to &quot;扩展学习&quot;">​</a></h2><h3 id="相关主题" tabindex="-1">相关主题 <a class="header-anchor" href="#相关主题" aria-label="Permalink to &quot;相关主题&quot;">​</a></h3><ul><li><strong>数据结构</strong>：深入学习其他Python数据结构</li><li><strong>算法复杂度</strong>：理解时间和空间复杂度</li><li><strong>函数式编程</strong>：学习map、filter、reduce等函数</li><li><strong>面向对象</strong>：学习类和对象的设计</li></ul><h3 id="进阶方向" tabindex="-1">进阶方向 <a class="header-anchor" href="#进阶方向" aria-label="Permalink to &quot;进阶方向&quot;">​</a></h3><ul><li><strong>数据科学</strong>：在pandas、numpy中使用集合概念</li><li><strong>算法设计</strong>：图算法、搜索算法中的集合应用</li><li><strong>系统设计</strong>：大规模系统中的集合优化</li><li><strong>数据库</strong>：SQL中的集合运算</li></ul><hr><p><strong>注意</strong>：学习过程中遇到问题，可以参考Python官方文档或在线资源。建议结合实际项目练习，加深对集合的理解和应用能力。</p>`,73)])])}const E=i(t,[["render",e]]);export{o as __pageData,E as default};
