import{_ as l,c as a,o as s,ag as e}from"./chunks/framework.DftKyQ5B.js";const u=JSON.parse('{"title":"19 类和对象 (Classes and Objects)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/19-classes-objects/index.md","filePath":"guide/19-classes-objects/index.md"}'),t={name:"guide/19-classes-objects/index.md"};function n(r,i,o,h,p,c){return s(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="_19-类和对象-classes-and-objects" tabindex="-1">19 类和对象 (Classes and Objects) <a class="header-anchor" href="#_19-类和对象-classes-and-objects" aria-label="Permalink to &quot;19 类和对象 (Classes and Objects)&quot;">​</a></h1><h2 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h2><p>掌握面向对象编程的基本概念和Python类的定义，学会设计和实现完整的类结构。</p><h2 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-label="Permalink to &quot;主要内容&quot;">​</a></h2><ul><li>面向对象编程的基本概念</li><li>类的定义和实例化</li><li>实例属性和类属性</li><li>实例方法、类方法和静态方法</li><li>构造方法__init__和析构方法__del__</li><li>属性访问控制：公有、私有、保护</li><li>self参数的理解</li><li>对象的内存管理</li><li>继承和多态的基础应用</li></ul><h2 id="文件说明" tabindex="-1">文件说明 <a class="header-anchor" href="#文件说明" aria-label="Permalink to &quot;文件说明&quot;">​</a></h2><h3 id="_01-defining-classes-py-类的定义基础" tabindex="-1"><a href="./01_defining_classes">01_defining_classes.py - 类的定义基础</a> <a class="header-anchor" href="#_01-defining-classes-py-类的定义基础" aria-label="Permalink to &quot;[01_defining_classes.py - 类的定义基础](./01_defining_classes.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>类的基本语法和定义</li><li>类的命名规范</li><li>简单类的创建和使用</li><li>类和对象的概念区别</li></ul><p><strong>重点知识点：</strong></p><ul><li><code>class</code> 关键字的使用</li><li>类名的命名规范（PascalCase）</li><li>类的基本结构</li><li>对象的创建和使用</li></ul><h3 id="_02-creating-objects-py-对象的创建和实例化" tabindex="-1"><a href="./02_creating_objects">02_creating_objects.py - 对象的创建和实例化</a> <a class="header-anchor" href="#_02-creating-objects-py-对象的创建和实例化" aria-label="Permalink to &quot;[02_creating_objects.py - 对象的创建和实例化](./02_creating_objects.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>对象的实例化过程</li><li>多个对象的创建和管理</li><li>对象的独立性</li><li>对象的内存分配</li></ul><p><strong>重点知识点：</strong></p><ul><li>实例化的概念和过程</li><li>对象的唯一性</li><li>内存中的对象存储</li><li>对象引用和赋值</li></ul><h3 id="_03-instance-methods-py-实例方法的定义和使用" tabindex="-1"><a href="./03_instance_methods">03_instance_methods.py - 实例方法的定义和使用</a> <a class="header-anchor" href="#_03-instance-methods-py-实例方法的定义和使用" aria-label="Permalink to &quot;[03_instance_methods.py - 实例方法的定义和使用](./03_instance_methods.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>实例方法的定义和调用</li><li>self参数的理解和使用</li><li>方法的参数传递</li><li>方法的返回值</li><li>方法链式调用</li><li>私有方法和公有方法</li></ul><p><strong>重点知识点：</strong></p><ul><li><code>self</code> 参数的作用</li><li>实例方法的调用机制</li><li>方法的封装性</li><li>特殊方法（魔术方法）</li></ul><h3 id="_04-instance-attributes-py-实例属性的操作" tabindex="-1"><a href="./04_instance_attributes">04_instance_attributes.py - 实例属性的操作</a> <a class="header-anchor" href="#_04-instance-attributes-py-实例属性的操作" aria-label="Permalink to &quot;[04_instance_attributes.py - 实例属性的操作](./04_instance_attributes.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>实例属性的创建和访问</li><li>属性的动态添加和删除</li><li>属性的类型验证</li><li>property装饰器的使用</li><li>描述符的基础应用</li></ul><p><strong>重点知识点：</strong></p><ul><li>实例属性 vs 类属性</li><li>属性的getter和setter</li><li><code>@property</code> 装饰器</li><li>属性验证和控制</li></ul><h3 id="_05-constructor-method-py-构造方法-init" tabindex="-1"><a href="./05_constructor_method">05_constructor_method.py - 构造方法__init__</a> <a class="header-anchor" href="#_05-constructor-method-py-构造方法-init" aria-label="Permalink to &quot;[05_constructor_method.py - 构造方法__init__](./05_constructor_method.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>构造方法的定义和使用</li><li>初始化参数的处理</li><li>默认参数和可变参数</li><li>构造方法中的验证和异常处理</li><li>继承中的构造方法调用</li></ul><p><strong>重点知识点：</strong></p><ul><li><code>__init__</code> 方法的作用</li><li>对象初始化过程</li><li>参数验证和异常处理</li><li>类方法作为替代构造器</li></ul><h3 id="_06-private-attributes-py-私有属性和访问控制" tabindex="-1"><a href="./06_private_attributes">06_private_attributes.py - 私有属性和访问控制</a> <a class="header-anchor" href="#_06-private-attributes-py-私有属性和访问控制" aria-label="Permalink to &quot;[06_private_attributes.py - 私有属性和访问控制](./06_private_attributes.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>Python中的访问控制机制</li><li>私有属性的实现（名称修饰）</li><li>getter和setter方法</li><li>property装饰器的高级使用</li><li>访问控制的最佳实践</li></ul><p><strong>重点知识点：</strong></p><ul><li>单下划线和双下划线的区别</li><li>名称修饰（Name Mangling）</li><li>封装的概念和实现</li><li>访问控制的设计原则</li></ul><h3 id="_07-class-attributes-py-类属性和类方法" tabindex="-1"><a href="./07_class_attributes">07_class_attributes.py - 类属性和类方法</a> <a class="header-anchor" href="#_07-class-attributes-py-类属性和类方法" aria-label="Permalink to &quot;[07_class_attributes.py - 类属性和类方法](./07_class_attributes.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>类属性的定义和使用</li><li>类属性与实例属性的区别</li><li>类方法和静态方法</li><li>类方法的装饰器使用</li><li>类属性的继承和重写</li></ul><p><strong>重点知识点：</strong></p><ul><li><code>@classmethod</code> 和 <code>@staticmethod</code> 装饰器</li><li>类属性的共享性</li><li>类方法的应用场景</li><li>静态方法的使用时机</li></ul><h3 id="_08-exercises-py-综合练习" tabindex="-1"><a href="./08_exercises">08_exercises.py - 综合练习</a> <a class="header-anchor" href="#_08-exercises-py-综合练习" aria-label="Permalink to &quot;[08_exercises.py - 综合练习](./08_exercises.md)&quot;">​</a></h3><p><strong>学习内容：</strong></p><ul><li>银行账户管理系统</li><li>学生成绩管理系统</li><li>图书馆管理系统</li><li>员工管理系统</li><li>完整的面向对象设计实践</li></ul><p><strong>重点知识点：</strong></p><ul><li>复杂类的设计和实现</li><li>类之间的关系和交互</li><li>继承和多态的应用</li><li>实际业务逻辑的面向对象建模</li></ul><h2 id="学习路径" tabindex="-1">学习路径 <a class="header-anchor" href="#学习路径" aria-label="Permalink to &quot;学习路径&quot;">​</a></h2><h3 id="第一阶段-基础概念-1-2天" tabindex="-1">第一阶段：基础概念（1-2天） <a class="header-anchor" href="#第一阶段-基础概念-1-2天" aria-label="Permalink to &quot;第一阶段：基础概念（1-2天）&quot;">​</a></h3><ol><li>学习 <a href="./01_defining_classes">类的定义基础</a> - 理解类和对象的基本概念</li><li>学习 <a href="./02_creating_objects">对象的创建和实例化</a> - 掌握对象的创建和实例化</li><li>完成基础练习，创建简单的类</li></ol><h3 id="第二阶段-方法和属性-2-3天" tabindex="-1">第二阶段：方法和属性（2-3天） <a class="header-anchor" href="#第二阶段-方法和属性-2-3天" aria-label="Permalink to &quot;第二阶段：方法和属性（2-3天）&quot;">​</a></h3><ol><li>学习 <a href="./03_instance_methods">实例方法的定义和使用</a> - 掌握实例方法的使用</li><li>学习 <a href="./04_instance_attributes">实例属性的操作</a> - 理解属性的操作和管理</li><li>学习 <a href="./05_constructor_method">构造方法__init__</a> - 掌握构造方法的使用</li><li>练习设计包含方法和属性的类</li></ol><h3 id="第三阶段-高级特性-2-3天" tabindex="-1">第三阶段：高级特性（2-3天） <a class="header-anchor" href="#第三阶段-高级特性-2-3天" aria-label="Permalink to &quot;第三阶段：高级特性（2-3天）&quot;">​</a></h3><ol><li>学习 <a href="./06_private_attributes">私有属性和访问控制</a> - 掌握访问控制机制</li><li>学习 <a href="./07_class_attributes">类属性和类方法</a> - 理解类属性和类方法</li><li>练习设计更复杂的类结构</li></ol><h3 id="第四阶段-综合应用-3-4天" tabindex="-1">第四阶段：综合应用（3-4天） <a class="header-anchor" href="#第四阶段-综合应用-3-4天" aria-label="Permalink to &quot;第四阶段：综合应用（3-4天）&quot;">​</a></h3><ol><li>学习 <a href="./08_exercises">综合练习</a> - 完成综合练习项目</li><li>独立设计和实现完整的类系统</li><li>总结面向对象编程的设计原则</li></ol><h2 id="练习要点" tabindex="-1">练习要点 <a class="header-anchor" href="#练习要点" aria-label="Permalink to &quot;练习要点&quot;">​</a></h2><h3 id="基础练习" tabindex="-1">基础练习 <a class="header-anchor" href="#基础练习" aria-label="Permalink to &quot;基础练习&quot;">​</a></h3><ol><li><p><strong>理解类和对象的关系</strong></p><ul><li>类是对象的模板</li><li>对象是类的实例</li><li>一个类可以创建多个对象</li></ul></li><li><p><strong>掌握类的定义和实例化</strong></p><ul><li>使用 <code>class</code> 关键字定义类</li><li>使用类名()创建对象</li><li>理解实例化过程</li></ul></li><li><p><strong>学会使用不同类型的方法</strong></p><ul><li>实例方法：操作实例数据</li><li>类方法：操作类数据</li><li>静态方法：独立的工具函数</li></ul></li></ol><h3 id="进阶练习" tabindex="-1">进阶练习 <a class="header-anchor" href="#进阶练习" aria-label="Permalink to &quot;进阶练习&quot;">​</a></h3><ol start="4"><li><p><strong>理解属性访问控制机制</strong></p><ul><li>公有属性：可以自由访问</li><li>私有属性：使用双下划线前缀</li><li>保护属性：使用单下划线前缀</li></ul></li><li><p><strong>练习设计简单的类结构</strong></p><ul><li>确定类的职责和功能</li><li>设计合理的属性和方法</li><li>考虑封装性和可扩展性</li></ul></li></ol><h3 id="高级练习" tabindex="-1">高级练习 <a class="header-anchor" href="#高级练习" aria-label="Permalink to &quot;高级练习&quot;">​</a></h3><ol start="6"><li><p><strong>掌握继承和多态</strong></p><ul><li>理解继承的概念和语法</li><li>学会方法重写</li><li>理解多态的实现</li></ul></li><li><p><strong>学会异常处理</strong></p><ul><li>在方法中添加参数验证</li><li>抛出和处理自定义异常</li><li>保证程序的健壮性</li></ul></li><li><p><strong>实践设计模式</strong></p><ul><li>单例模式</li><li>工厂模式</li><li>观察者模式</li></ul></li></ol><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><h3 id="环境要求" tabindex="-1">环境要求 <a class="header-anchor" href="#环境要求" aria-label="Permalink to &quot;环境要求&quot;">​</a></h3><ul><li>Python 3.6+</li><li>支持面向对象编程的IDE或文本编辑器</li></ul><h3 id="运行所有示例" tabindex="-1">运行所有示例 <a class="header-anchor" href="#运行所有示例" aria-label="Permalink to &quot;运行所有示例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19-classes-objects</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 按顺序运行所有文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 01_defining_classes.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 02_creating_objects.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 03_instance_methods.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 04_instance_attributes.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 05_constructor_method.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 06_private_attributes.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 07_class_attributes.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 08_exercises.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="学习建议" tabindex="-1">学习建议 <a class="header-anchor" href="#学习建议" aria-label="Permalink to &quot;学习建议&quot;">​</a></h3><ol><li><p><strong>循序渐进</strong>：按照文件编号顺序学习，每个概念都建立在前面的基础上</p></li><li><p><strong>动手实践</strong>：不要只看代码，要亲自运行和修改</p></li><li><p><strong>理解概念</strong>：重点理解面向对象的核心概念：封装、继承、多态</p></li><li><p><strong>设计思维</strong>：学会从面向对象的角度分析和设计问题</p></li><li><p><strong>代码规范</strong>：遵循Python的命名规范和编码风格</p></li><li><p><strong>调试技巧</strong>：学会使用调试工具查看对象的状态</p></li><li><p><strong>扩展练习</strong>：尝试修改示例代码，添加新功能</p></li><li><p><strong>项目实践</strong>：完成综合练习后，尝试设计自己的项目</p></li></ol><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="q-什么时候使用类方法-什么时候使用静态方法" tabindex="-1">Q: 什么时候使用类方法，什么时候使用静态方法？ <a class="header-anchor" href="#q-什么时候使用类方法-什么时候使用静态方法" aria-label="Permalink to &quot;Q: 什么时候使用类方法，什么时候使用静态方法？&quot;">​</a></h3><p>A:</p><ul><li>类方法：需要访问类属性或创建类实例时使用</li><li>静态方法：功能独立，不需要访问类或实例数据时使用</li></ul><h3 id="q-如何选择使用私有属性还是公有属性" tabindex="-1">Q: 如何选择使用私有属性还是公有属性？ <a class="header-anchor" href="#q-如何选择使用私有属性还是公有属性" aria-label="Permalink to &quot;Q: 如何选择使用私有属性还是公有属性？&quot;">​</a></h3><p>A:</p><ul><li>内部实现细节使用私有属性</li><li>需要外部访问的数据使用公有属性</li><li>需要控制访问的属性使用property装饰器</li></ul><h3 id="q-继承什么时候使用" tabindex="-1">Q: 继承什么时候使用？ <a class="header-anchor" href="#q-继承什么时候使用" aria-label="Permalink to &quot;Q: 继承什么时候使用？&quot;">​</a></h3><p>A:</p><ul><li>存在&quot;是一个&quot;关系时使用继承</li><li>需要扩展现有类的功能时</li><li>多个类有共同特征时</li></ul><h2 id="下一步学习" tabindex="-1">下一步学习 <a class="header-anchor" href="#下一步学习" aria-label="Permalink to &quot;下一步学习&quot;">​</a></h2><p>完成本模块后，建议继续学习：</p><ul><li><strong>20-inheritance-polymorphism</strong> - 继承和多态</li><li><strong>21-special-methods</strong> - 特殊方法和运算符重载</li><li><strong>22-design-patterns</strong> - 设计模式</li><li><strong>23-advanced-oop</strong> - 高级面向对象编程</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://docs.python.org/3/tutorial/classes.html" target="_blank" rel="noreferrer">Python官方文档 - 类</a></li><li><a href="https://realpython.com/python3-object-oriented-programming/" target="_blank" rel="noreferrer">Python面向对象编程指南</a></li><li><a href="https://book.douban.com/subject/1052241/" target="_blank" rel="noreferrer">设计模式：可复用面向对象软件的基础</a></li></ul>`,84)])])}const _=l(t,[["render",n]]);export{u as __pageData,_ as default};
